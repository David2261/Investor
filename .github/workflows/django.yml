name: Django CI
run-name: ${{ github.actor }} is testing out Github CI/CD

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            pg_isready -h localhost -U test_user -d test_db && echo "PostgreSQL is ready" && break
            echo "Waiting for PostgreSQL..."
            sleep 3
          done
          if ! pg_isready -h localhost -U test_user -d test_db; then
            echo "PostgreSQL failed to start" && exit 1
          fi

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          python manage.py migrate

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FRONTEND_HOST: ${{ secrets.FRONTEND_HOST }}
          OAUTH_GOOGLE_CLIENTID: ${{ secrets.OAUTH_GOOGLE_CLIENTID }}
          OAUTH_GOOGLE_SECRET: ${{ secrets.OAUTH_GOOGLE_SECRET }}
          OAUTH_MICROSOFT_CLIENTID: ${{ secrets.OAUTH_MICROSOFT_CLIENTID }}
          OAUTH_MICROSOFT_SECRET: ${{ secrets.OAUTH_MICROSOFT_SECRET }}
          OAUTH_YANDEX_CLIENTID: ${{ secrets.OAUTH_YANDEX_CLIENTID }}
          OAUTH_YANDEX_SECRET: ${{ secrets.OAUTH_YANDEX_SECRET }}
          REDIS_BROKER_URL: ${{ secrets.REDIS_BROKER_URL }}
          DEBUG: "False"
        run: |
          pytest --verbose --fail-fast